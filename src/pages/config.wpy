<style lang="scss">
  @import '../assets/style/_variables.scss';
  @import '../assets/style/_common.scss';

  .config {
    box-sizing: border-box;
    width: 750rpx;
    overflow-x: hidden;
  }
</style>

<template>
  <view class="config" wx:if="{{isShow}}">
    <attndTitle><view slot="title">考勤信息</view></attndTitle>
    <nameInput :model.sync="nameModel"></nameInput>  
    <datePicker :model.sync="dateModel"></datePicker>
    <timePicker :model.sync="timeModel"></timePicker>
    <lastInput :model.sync="lastModel"></lastInput>
    <groupInput :model.sync="groupModel"></groupInput>
    <attndTitle><view slot="title">* 输入考勤名单名称可新建考勤名单，新建的考勤名单里的成员由当次考勤确定；若已有历史名单，可点击选择选取</view></attndTitle>
    <attndTitle><view slot="title">个人信息</view></attndTitle>
    <authorInput :model.sync="authorModel"></authorInput>
    <placeInput :model.sync="placeModel"></placeInput>
    <attndTitle><view slot="title">* 签到有效范围为 200 米，上限 1000 人</view></attndTitle>
    <attndBtn :btns.sync="btnModel"></attndBtn>
    <toast />
  </view>
</template>

<script>
  import wepy from 'wepy'
  import ALog from '../mixins/a-log'
  import AttndTitle from '../components/attnd-title'
  import AttndInput from '../components/attnd-input'
  import AttndBtn from '../components/attnd-btn'
  import { Type, BtnType, URL, CODE } from '../share/consts'
  import { getTimeFormat, getCurTime, getTimeMsFromTimeS, getTimeSFromTimeMs, dateToTimeS, isNumber } from '../share/funcs'
  import zmap from '../utils/zmap'
  import mock from '../utils/mock'
  import zajax from '../utils/zajax'
  import AToast from '../mixins/a-toast'
  import Toast from 'wepy-com-toast'
  import { ToastType } from '../share/consts'

  export default class Config extends wepy.page {

    mixins = [ALog]
    data = {
      nameModel: {},
      dateModel: {},
      timeModel: {},
      lastModel: {},
      groupModel: {},
      authorModel: {},
      placeModel: {},
      btnModel: [],
      isShow: false,
      
      location: {
        latitude: null,
        longitude: null,
        accuracy: null,
      }
    }

    components = {
      attndTitle: AttndTitle,
      attndBtn: AttndBtn,
      nameInput: AttndInput,
      datePicker: AttndInput,
      timePicker: AttndInput,
      groupInput: AttndInput,
      lastInput: AttndInput,
      authorInput: AttndInput,
      placeInput: AttndInput,
      toast: Toast
    }

    onLoad(option) {
      wx.setNavigationBarTitle({ title: '发布考勤' })
      this.initData()
    }

    initData() {
      this.getData()
      this.nameModel = { type: Type.TEXT_SELECT, label: '考勤名称', readonly: false, length: 50, value: '', hint: '例如：计网', extra: '选择', options: [] }
      this.dateModel = { type: Type.DATE, label: '日期', readonly: false, options: [], value: '' }
      this.timeModel = { type: Type.TIME, label: '时间', readonly: false, options: [], value: '' }
      this.lastModel = { type: Type.SELECT, label: '持续', readonly: false, options: [], suffix: '分钟', value: '5', }
      this.groupModel = { type: Type.TEXT_SELECT, label: '考勤名单', readonly: false, length: 50, value: '', hint: '例如：计科151', extra: '选择', options: [] }
      this.authorModel = { type: Type.TEXT, label: '发布者', readonly: false, length: 50, value: '', hint: '' }
      this.placeModel = { type: Type.TEXT_SELECT, label: '地点', readonly: false, length: 50, value: '', hint: '例如：理南404', extra: '选择', options: []}
      this.lastModel.options = ['5','10','15','20','30']

      this.dateModel.value = getCurTime('date')
      this.timeModel.value = getCurTime('time')
      this.btnModel = [
        { name: '发布', emit: 'release-btn', color: '#00897B' }
      ]
      this.isShow = true  
    }

    // Promise 并行开始，串行结束
    async getData() {
      wx.showNavigationBarLoading()
      let a = this.getGroupList()
      let b = this.getAttndNames()
      let c = this.getAuthorName()
      let d = this.getLocation()
      let e = this.getHistoryLocation()
      await a
      await b
      await c
      await d
      await e
      wx.hideNavigationBarLoading()
      return
    }

    // 获取历史考勤名字列表
    getAttndNames() {
      return mock.getAttndNames()
        .then(data => {
          this.nameModel.options = data
          this.$apply()
        })
    }

    // 获取考勤名单名字列表
    getGroupList() {
      return mock.getGroupList()
        .then(data => {
          this.groupModel.options = data
          this.$apply()
        })
    }

    // 获取历史常用位置列表
    getHistoryLocation() {
      return mock.getHistoryLocation()
        .then(data => {
          this.placeModel.options = data
          this.$apply()
        })
    }

    // 获取我的名字
    getAuthorName() {
      return mock.getSelfInfo()
        .then(data => {
          this.authorModel.value = data.data.name ? data.data.name : ''
          this.$apply()
        })
    }

    // 获取位置
    getLocation() {
      return zmap.getLocation()
        .then(res => { 
          this.location.latitude = res.latitude
          this.location.longitude = res.longitude
          this.location.accuracy = res.accuracy
          this.$apply()
        })
        .catch(err => console.log(err))
    }

    methods = {

    }

    events = {
      'release-btn': event => {
        this.releaseAttnd()
      }
    }

    // 发布考勤
    releaseAttnd() {
      let checkRes = this.checkData()
      if (!checkRes.status) {
        wx.showModal({ title: '提示', content: checkRes.msg })
        return
      }
      let reqData = {
        "attnd_name": this.nameModel.value,
        "start_time": dateToTimeS(`${this.dateModel.value} ${this.timeModel.value}`),
        "last": +this.lastModel.value,
        "location": {
            "latitude": this.location.latitude,
            "longitude": this.location.longitude,
            "accuracy": this.location.accuracy
        },
        "addr_name": this.placeModel.value,
        "group_name": this.groupModel.value,
        "teacher_name": this.authorModel.value
      }
      this.showToast(ToastType.LOADING, '正在发布')
      zajax.postFD(URL.attnd, reqData)
        .then(res => {
          this.hideToast()
          let body = res.data
          let code = body.code
          if (code !== CODE.GLOBAL_SUCCESS) {   
            this.showToast(ToastType.FAIL, '失败', 2000)
            return
          }
          this.showToast(ToastType.FAIL, '失败', 2000)
        })
        .catch(err => {
          this.showToast(ToastType.FAIL, '失败', 2000)
          this.print(err)
        })
    }

    // 检查字段
    checkData() {
      for (let key of this.location) {
        if (!isNumber(this.location[key])) return { status: false, msg: `[位置信息] 未获取` }
      }
      [this.nameModel, this.dateModel, this.timeModel, this.lastModel, this.groupModel, this.authorModel, this.placeModel]
        .forEach(el => {
          if (!el.value) {
            return { status: false, msg: `[${el.label}] 未正确填写` }
          }
        });
      return true
    }

  }
</script>
