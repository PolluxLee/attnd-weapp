<style lang="scss">
  @import '../assets/style/_variables.scss';
  @import '../assets/style/_common.scss';

  .attnd {
    width: 100%;
    padding: 46rpx 46rpx 100rpx 46rpx;
    box-sizing: border-box;
    position: relative;

    &__header {
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      position: relative;
      padding-bottom: 30rpx;
      margin-bottom: 30rpx;
      border-bottom: 1rpx dashed $edge;
    }

    &__title {
      white-space: nowrap;
      overflow-x: auto;
      width: 500rpx;
      font-size: 48rpx;
      color: black;
      margin-bottom: 20rpx;
    }

    &__p {
      white-space: nowrap;
      overflow-x: auto;
      font-size: 30rpx;
      color: $font;
      margin-top: 4rpx;
      margin-bottom: 4rpx;
      &--pwd {
        color: $theme;
      }
    }

    &__remove {
      width: 40rpx;
      height: 40rpx;
      position: absolute;
      right: 15rpx;
      top: 80rpx;
    }

    &__oper {
      color: $font;
      box-sizing: border-box;
      display: flex;
      justify-content: space-between;
      width: 100%;
      font-size: 30rpx;
    }

    &__count {
      margin-right: 100rpx;
      padding-bottom: 30rpx;
    }

    &__filter {
      padding-bottom: 30rpx;
      &--text {
        display: inline-block;
        vertical-align: center;
        margin-right: 6rpx;
      }
      &--img {
        width: 30rpx;
        height: 30rpx;
        display: inline-block;
        vertical-align: center;
      }
    }

    &__item {
      display: flex;
      width: 100%;
      height: 100rpx;
      margin-bottom: 30rpx;
      animation: fade-out 0.5s;
      &--avator {
        width: 100rpx;
        height: 100rpx;
        margin-right: 30rpx;
        border-radius: 50%;
        background: $theme;
        display: flex;
        justify-content: center;
        align-items: center;
        color: white;
        font-size: 40rpx;
        overflow: hidden;
        &-me { background: $acid; }
      }
      &--info {
        height: 100%;
        width: 400rpx;
        display: flex;
        flex-direction: column;
        justify-content: center;
      }
      &--name {
        white-space: nowrap;
        overflow-x: auto;
        color: black;
        font-size: 32rpx;
        margin: 4rpx 0;
      }
      &--location {
        white-space: nowrap;
        overflow-x: auto;
        color: $font;
        font-size: 26rpx;
        margin: 4rpx 0;
      }
      &--icon {
        height: 100rpx;
        width: 120rpx;
        display: flex;
        justify-content: space-around;
        align-items: center;
        font-size: 24rpx;
      }
    }

    &__list {
      margin-bottom: 150rpx;
      animation: fade-out 0.5s;
    }

    &__resp {
      position: fixed;
      box-sizing: border-box;
      width: 100%;
      height: 100rpx;
      bottom: 0;
      left: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      font-size: 36rpx;
      &--signin {
        background: $theme;
        &:active {
          background: $theme-dark;
        }
      }
      &--finish {
        background: $alert;
        &:active {
          background: $alert-dark;
        }
      }
    }

    &__tag {
      position: absolute;
      right: 0rpx;
      top: 10rpx;
      width: 110rpx;
      height: 42rpx;
      font-size: 28rpx;
      display: flex;
      justify-content: center;
      align-items: center;
      border-radius: 10rpx;
      &--ongoing {
        color: $theme;
        border: 1rpx solid $theme;
      }
      &--over {
        color: $font;
        border: 1rpx solid $font;
      }
    }

    &__baseline {
      animation: fade-out 0.5s;
      box-sizing: border-box;
      display: flex;
      justify-content: center;
      align-items: center;
      &--line {
        height: 1rpx;
        width: 50rpx;
        background: $hint;
      }
      &--text {
        color: $hint;
        font-size: 30rpx;
        box-sizing: border-box;
        padding-left: 10rpx;
        padding-right: 10rpx;
        text-align: center;
      }
    }
  }
</style>

<template>
  <scroll-view style="height: 100vh; background: white"
    scroll-y="true" lower-threshold="50" bindscrolltolower="onScrollToLower">
    <view class="attnd" wx:if="{{isShow}}">
      <view class="attnd__header">
        <view class="attnd__tag attnd__tag--over" wx:if="{{isAttndFinish}}">已结束</view>
        <view class="attnd__tag attnd__tag--ongoing" wx:if="{{!isAttndFinish}}">进行中</view>
        <view class="attnd__title">{{baseInfo.attnd_name}}</view>
        <view class="attnd__p attnd__p--pwd">口令：{{baseInfo.cipher}}</view>
        <view class="attnd__p">时间：{{baseInfo.start_time}}</view>
        <view class="attnd__p">发布者：{{baseInfo.teacher_name}}</view>
        <view class="attnd__p">地点：{{baseInfo.addr_name}}</view>
        <image class="attnd__remove" wx:if="{{displayRemove}}" src="{{Icon.remove}}" mode="scaleToFill" @tap="onClickRemove"/>
      </view>
      <view class="attnd__list">
        <view class="attnd__oper">
          <view class="attnd__count">{{displayCount}}</view>
          <view class="attnd__filter" @tap="attndListFilter">
            <view class="attnd__filter--text">{{filterListStatus}}</view>
            <image class="attnd__filter--img" src="{{Icon.triangle}}" mode="scaleToFill"/>
          </view>
        </view>
        <view class="attnd__item" wx:for-items="{{attndList}}" wx:for-item="stu" wx:key="id" wx:if="{{isShowList}}">
          <view class="attnd__item--avator">{{stu.avator}}</view>
          <view class="attnd__item--info">
            <view class="attnd__item--name">{{stu.name}}{{stu.stu_id  ? '（'+ stu.stu_id +'）' : ''}}</view>
            <view class="attnd__item--location">距离：{{stu.distance}}m</view>
          </view>
          <view class="attnd__item--icon" @tap="toggleSigninStatus({{stu.openid}})">
            <image wx:if="{{stu.attnd_status===SigninType.ARRIVED}}" src="{{Icon.attndArrived}}" mode="scaleToFill" style="height: 40rpx; width: 40rpx" />
            <image wx:if="{{stu.attnd_status===SigninType.DISTANCE_OUT}}" src="{{Icon.attndDistanceOut}}" mode="scaleToFill" style="height: 40rpx; width: 40rpx" />
            <image wx:if="{{stu.attnd_status===SigninType.TIME_OUT}}" src="{{Icon.attndTimeOut}}" mode="scaleToFill" style="height: 40rpx; width: 40rpx" />
            <view wx:if="{{stu.attnd_status===SigninType.ARRIVED}}">已到</view>
            <view wx:if="{{stu.attnd_status===SigninType.DISTANCE_OUT}}">超距</view>
            <view wx:if="{{stu.attnd_status===SigninType.TIME_OUT}}">迟到</view>
          </view>
        </view>
        <view class="attnd__baseline" wx:if="{{count!==0 && count===attndList.length && isShowList}}">
          <view class="attnd__baseline--line"></view>
          <view class="attnd__baseline--text">{{baselineMsg}}</view>
          <view class="attnd__baseline--line"></view>
        </view>
        <view class="attnd__baseline" wx:if="{{!emptyLock && attndList.length===0}}">
          <view class="attnd__baseline--text">{{emptyMsg}}</view>
        </view>
      </view>
      <view class="attnd__resp attnd__resp--signin" 
        style="background: {{isSignin ? 'grey' : ''}}" 
        @tap="onSignIn" wx:if="{{isStudent}}">
        {{signinBtnText}}
      </view>
      <view class="attnd__resp attnd__resp--finish" 
        style="background: {{isAttndFinish ? 'grey' : ''}}" 
        @tap="onFinishAttnd" wx:if="{{isTeacher}}">
        {{finishBtnText}}
      </view>
      <toast />
    </view>
  </scroll-view>
</template>

<script>
  import wepy from 'wepy'
  import { Icon } from '../assets/icon/icon'
  import AToast from '../mixins/a-toast'
  import Toast from 'wepy-com-toast'
  import { ToastType, URL, CODE, SigninType, AttndStatus, Identity } from '../share/consts'
  import { isNumber, getTimeFormat } from '../share/funcs'
  import zajax from '../utils/zajax'
  import zmap from '../utils/zmap'
  import zlog, { LogLevel } from '../utils/zlog'
  import zmid from '../utils/zmid'
  import zstore from '../utils/zstore'

  export default class Attnd extends wepy.page {

    config = {
      enablePullDownRefresh: true,
      backgroundColor: '#ffffff'
    }

    mixins = [AToast]
    data = {
      from: '',
      Icon: Icon,
      SigninType: SigninType,
      AttndStatus: AttndStatus,
      Identity: Identity,
      cipher: '',
      isShow: false,
      isShowList: true,
      
      self: {}, 
      baseInfo: {},
      attndList: [],
      identity: Identity.VISITOR,   //身份
      signInFilter: SigninType.SIGNIN_ALL,    //筛选
      attndStatus: AttndStatus.ATTND_NORMAL,    //考勤状态

      page: 1,
      pageSize: 10,
      presentCnt: 0,
      count: 0,

      emptyLock: true,   //空列表提示锁
      baselineMsg: '没有更多了',
      emptyMsg: '无签到信息',
      location: {
        latitude: null,
        longitude: null,
        accuracy: null,
      }
    }

    components = {
      toast: Toast
    }

    computed = {
      // 人数的显示
      displayCount() {
        if (Number.isInteger(this.presentCnt)
          && Number.isInteger(this.count)) {
            return `人数：${this.presentCnt} / ${this.count}`
        }
        // 其他情况
        if (Number.isInteger(this.count)) return `人数：${this.count}`
        return ''
      },
      // 控制签到按钮的显示
      isStudent() {
        if (this.identity === Identity.STUDENT) return true
        return false
      },
      // 控制结束考勤按钮的显示
      isTeacher() {
        if (this.identity === Identity.TEACHER) return true
        return false
      },
      // 控制删除的显示
      displayRemove() {
        if (this.identity === Identity.TEACHER && this.isAttndFinish) return true
        return false
      },
      // 筛选后的列表状态
      filterListStatus() {
        switch (this.signInFilter) {
          case SigninType.SIGNIN_ALL: return '全部'
          case SigninType.DISTANCE_OUT: return '超出距离'
          case SigninType.TIME_OUT: return '迟到'
        }
      },
      // 返回 true 表示已签到或 self 结构体不为空
      isSignin() {
        if (JSON.stringify(this.self) !== '{}' 
          && (this.identity===Identity.STUDENT)
          && (typeof this.self.attnd_status === 'number' && this.self.attnd_status > 0) ) return true
        return false
      },
      // 显示 self 结构体
      isShowSelf() {
        if (JSON.stringify(this.self) !== '{}' 
          && (this.identity===Identity.STUDENT)
          && (this.signInFilter === SigninType.SIGNIN_ALL || this.signInFilter === this.self.attnd_status) ) return true
        return false
      },
      // 返回 true 表示考勤已结束
      isAttndFinish() {
        return this.baseInfo.status === AttndStatus.ATTND_FINISH
      },
      signinBtnText() {
        if (this.isSignin) return '已签到'
        return '签到'
      },
      finishBtnText() {
        if (this.isAttndFinish) return '已结束'
        return '结束考勤'
      }
    }

    onLoad(option) {
      zlog.log(option)
      this.cipher = option.cipher ? option.cipher : ''
      if (this.cipher) this.from = `attnd?cipher=${this.cipher}`
      wx.setNavigationBarTitle({ title: '考勤情况' })
    }

    onUnload() {
      zlog.flushLog()
    }

    onShow() {
      this.getData()
    }

    // 获取考勤信息
    async getData() {
      wx.showNavigationBarLoading()
      await this.getAttndInfo()
      this.isShow = true
      this.isShowList = true
      this.$apply()
      await this.getResponserList() 
      wx.hideNavigationBarLoading()
      // setInterval(()=>{ this.refreshData() }, 6500)
    }

    // 刷新数据
    async refreshData({ page, isShow, isShowList }) {
      wx.showNavigationBarLoading()
      if (Number.isInteger(page) && page > 0) this.page = page
      if (typeof isShow === 'boolean') this.isShow = isShow
      if (typeof isShowList === 'boolean') this.isShowList = isShowList
      this.$apply()
      await this.getAttndInfo()
      await this.getResponserList()
      this.isShow = true
      this.isShowList = true
      this.$apply()
      wx.hideNavigationBarLoading()
    }

    // 监听下拉
    onPullDownRefresh() {
      this.refreshData({ isShow: true, isShowList: true })
    }

    // 获取考勤基本信息
    getAttndInfo() {
      return zajax.get(URL.attnd, { cipher: this.cipher }, this.from)
        .then(res =>{
          let body = res.data
          let code = body.code
          zlog.setLog({
            level: LogLevel.INFO,
            msg: `${code}`,
            loc: 'pages/attnd function getAttndInfo()',
            oper: '获取考勤基本信息'
          })
          if (code !== CODE.GLOBAL_SUCCESS) return
          this.baseInfo = body.data
          // 获取考勤状态，负数表示考勤结束
          this.attndStatus = this.baseInfo.status
          // 判别身份，做权限控制渲染和交互
          let id = zstore.get(zstore.id)
          if (id === this.baseInfo.teacher_id) {
            this.identity = Identity.TEACHER
          } else {
            this.identity = Identity.STUDENT
          }
          // 数据加工
          let date = new Date(this.baseInfo.start_time)
          this.baseInfo.start_time = `${getTimeFormat(date, 'date', '/')} ${getTimeFormat(date, 'time', ':')}`
          this.$apply()
        })
        .catch(err => {})
    }

    // 获取签到者列表
    async getResponserList(paging) {
      let reqData = {
        page: this.page,
        page_size: this.pageSize,
        signin_status: this.signInFilter,
        cipher: this.cipher ? this.cipher : '',
        attnd_id: this.baseInfo.attnd_id
      }
      this.emptyLock = true
      this.$apply()
      await zajax.get(URL.attndSituation, reqData, this.from)
        .then(res => {
          let body = res.data
          let code = body.code
          zlog.setLog({
            level: LogLevel.INFO,
            msg: `${code}`,
            loc: 'pages/attnd function getResponserList()',
            oper: '获取考勤列表'
          })
          if (code !== CODE.GLOBAL_SUCCESS) return
          // 获取人数
          let attndInfo = body.data
          this.count = attndInfo.count
          this.presentCnt = attndInfo.present_count
          // 获取自己，将自己置顶
          if (Array.isArray(attndInfo.attnds)) {
            if (paging) this.attndList = this.attndList.concat(attndInfo.attnds)
            else this.attndList = attndInfo.attnds
          }
          this.attndList = this.attndList.map(el => {
            if (typeof el.name === 'string') {
              el.avator = el.name[0].toUpperCase()
            }
            if (isNumber(el.distance)) el.distance = Math.floor(el.distance)
            else el.distance = -1
            return el
          })
          this.$apply()
          this.self = attndInfo.my_signin
          if (typeof this.self.name === 'string') {
              this.self.avator = this.self.name[0].toUpperCase()
          }
          if (isNumber(this.self.distance)) this.self.distance = Math.floor(this.self.distance)
          else el.distance = -1
          this.$apply()
        })
        .catch(err => {})
      setTimeout(() => { this.emptyLock = false; this.$apply() }, 200);
      this.$apply()
      wx.stopPullDownRefresh()
    }

    async signIn() {
      if (!zmid.checkSelfinfo()) {
        this.showToast(ToastType.HINT, '完善信息', 1000)
        zlog.setLog({level: LogLevel.INFO,msg: `签到时未填写个人信息`,loc: 'pages/attnd function signIn()',oper: '签到'})
        setTimeout(() => { wx.navigateTo({ url: 'selfinfo' }) }, 1000)
        return
      }
      this.showToast(ToastType.LOADING, '获取位置')
      // 获取经纬度
      await zmap.getLocation()
        .then(res => {
          zlog.setLog({level: LogLevel.INFO,
            msg: JSON.stringify(res),
            loc: 'pages/attnd function signIn()',
            oper: '签到时获取位置'
          })
          this.location.latitude = res.latitude
          this.location.longitude = res.longitude
          this.location.accuracy = res.accuracy
          this.$apply()
        })
        .catch(err => {})
      this.hideToast()
      let checkLoc = this.checkLocation()
      if (!checkLoc) {
        wx.navigateTo({ url: 'auth' })
        return
      }
      this.showToast(ToastType.LOADING, '正在签到')
      // 提交签到
      let reqData = {
        cipher: this.cipher,
        location: this.location,
        attnd_id: this.baseInfo.attnd_id
      }
      await zajax.post(URL.signIn, reqData, this.from)
        .then(res => {
          let body = res.data
          let code = body.code
          zlog.setLog({level: LogLevel.INFO,msg: `${code}`,loc: 'pages/attnd function signIn()',oper: '签到'})
          let msg = ''
          switch (code) {
            case CODE.GLOBAL_SUCCESS: 
              switch (body.data) {
                case SigninType.ARRIVED: msg = '签到成功'; break
                case SigninType.DISTANCE_OUT: msg = '超出距离'; break
                case SigninType.TIME_OUT: msg = '考勤已结束'; break
                case SigninType.NOT_ARRIVED: msg = '签到失败'; break
                default: msg = '签到失败'; break
              }
              break
            case ATTND_NOT_EXIST: msg = '考勤不存在'; break
            case ATTND_CIPHER_NOT_CORRESPOND: msg = '签到失败'; break
            case ATTND_HAS_SIGNIN: msg = '已签到'; break
            case ATTND_EXPIRED: msg = '考勤已结束'; break
            case ATTND_NOT_BELONG: msg = '你不在名单内'; break
            case ATTND_CREATOR: msg = '无需签到'; break
            default: msg = '签到失败'; break
          }
          this.showToast(ToastType.HINT, msg, 2000)
        })
        .catch(err => { this.showToast(ToastType.FAIL, '签到失败', 2000) })

      this.refreshData({ page: 1, isShow: true, isShowList: true })
    }

    //检查位置
    checkLocation() {
      for (let key in this.location) {
        if (!isNumber(this.location[key])) return false
        if (key === 'latitude' && !(this.location[key] >= -90 && this.location[key] <= 90)) return false
        if (key === 'longitude' && !(this.location[key] >= -180 && this.location[key] <= 180)) return false
      }
      return true
    }

    methods = {
      // 修改签到者状态
      toggleSigninStatus(openid) {
        if (this.isStudent || !this.isAttndFinish) return
        if (!openid) return
        wx.showActionSheet({
          itemList: ['修改为已到', '修改为超出距离', '修改为迟到'],
          success: res => {
            let status
            switch (res.tapIndex) {
              case 0: status = SigninType.ARRIVED; break
              case 1: status = SigninType.DISTANCE_OUT; break
              case 2: status = SigninType.TIME_OUT; break
            }
            this.updateSigninStatus(status, openid)
          },
          fail: res => console.log(res.errMsg)
        })
      },
      // 筛选不同状态的签到列表
      attndListFilter() {
        wx.showActionSheet({
          itemList: ['全部', '超出距离', '迟到'],
          success: res => {
            switch (res.tapIndex) {
              case 0: this.signInFilter = SigninType.SIGNIN_ALL; break
              case 1: this.signInFilter = SigninType.DISTANCE_OUT; break
              case 2: this.signInFilter = SigninType.TIME_OUT; break
            }
            this.refreshData({ page: 1, isShow: true, isShowList: false })
          },
          fail: res => console.log(res.errMsg)
        })
      },
      onScrollToLower() {
        this.page++
        this.getResponserList(true)
      },
      onSignIn() {
        if (this.isSignin) return
        this.signIn()
      },
      onClickRemove() {
        if (!this.isAttndFinish || this.isStudent) return
        wx.showModal({
          title: '提示',
          content: '删除考勤后，列表中将不会出现此考勤，确认删除？',
          success: res => {
            if (res.confirm) {
              this.removeAttnd()
            }
          }
        })
      },
      onFinishAttnd() {
        if (this.isAttndFinish || this.isStudent) return
        wx.showModal({
          title: '提示',
          content: '在考勤结束后签到的人，会被视为迟到，确定结束考勤？',
          success: res => {
            if (res.confirm) {
              this.finishAttnd()
            }
          }
        })
      }
    }

    // 结束考勤
    async finishAttnd() {
      if (!this.cipher) { this.showToast(ToastType.FAIL, '操作失败', 1000); return }
      this.showToast(ToastType.LOADING, '正在结束')
      await zajax.postFD(URL.endAttnd, { cipher: this.cipher }, this.from)
        .then(res => {
          this.hideToast()
          let body = res.data
          let code = body.code
          if (code === CODE.GLOBAL_SUCCESS) {
            
          }
        })
        .catch(err => {})
      this.refreshData({ isShow: true, isShowList: true })
    }

    // 删除考勤
    removeAttnd() {
      let cipher = this.cipher
      if (!cipher) {
        this.showToast(ToastType.FAIL, '操作失败', 1000)
        return
      }
      this.showToast(ToastType.LOADING, '加载中')
      zajax.postFD(URL.removeAttnd, { cipher }, this.from)
        .then(res => {
          this.hideToast()
          let body = res.data
          let code = body.code
          if (code !== CODE.GLOBAL_SUCCESS) {
            this.showToast(ToastType.FAIL, '操作失败', 1000)
            return
          }
          this.showToast(ToastType.SUCCESS, '删除成功', 1000)
          wx.navigateBack()
        })
        .catch(err => { this.showToast(ToastType.FAIL, '操作失败', 1000) })
    }

    // 结束考勤后修改签到状态
    updateSigninStatus(status, openid) {
      this.showToast(ToastType.LOADING, '正在修改')
      let reqData = {
        cipher: this.cipher ? this.cipher : '',
        openid,
        attnd_status: status
      }
      zajax.postFD(URL.updateSignIn, reqData, this.from)
        .then(res => {
          this.hideToast()
          let body = res.data
          let code = body.code
          if (code !== CODE.GLOBAL_SUCCESS) {
            this.showToast(ToastType.FAIL, '操作失败', 1000)
            return
          }
          this.$apply()
          this.refreshData({ isShow: true, isShowList: true })
        })
        .catch(err => {})
    }

    // onShareAppMessage(res) {
    //   if (res.from === 'button') {
    //     // 来自页面内转发按钮
    //     console.log(res.target)
    //   }
    //   return {
    //     title: '一起来签到',
    //     path: `/pages/attnd?cipher=${this.cipher}`
    //   }
    // }

  }
</script>
